from flask import Flask, render_template, request, redirect, url_for
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
import requests
from dotenv import load_dotenv
import os
import logging
from pprint import pprint

# logging.basicConfig(level=logging.DEBUG, 
#                     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
#                     filename='app.log', 
#                     filemode='w')

logging.basicConfig(level=logging.DEBUG, handlers=[logging.StreamHandler()], format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


app = Flask(__name__)
load_dotenv()
app.config["SECRET_KEY"] = "my_secret"
api_key = os.environ['WATCHMODE_API_KEY']

api_icons_mapping = [{'icon': 'https://cdn.watchmode.com/provider_logos/netflix_100px.png',
  'name': 'Netflix'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/prime_video_100px.png',
  'name': 'Prime Video'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/disneyPlus_100px.png',
  'name': 'Disney+'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/appleTvPlus_100px.png',
  'name': 'AppleTV+'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/409_autogenerated.png',
  'name': 'BBC iPlayer'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/392_autogenerated.png',
  'name': 'Hayu'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/paramountPlus_100px.png',
  'name': 'Paramount+'},
  {'icon': 'https://cdn.watchmode.com/provider_logos/paramountPlus_100px.png',
  'name': 'Paramount Plus'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/freevee_100px.png',
  'name': 'Amazon Freevee'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/408_autogenerated.png',
  'name': 'Sky Go'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/406_autogenerated.png',
  'name': 'Now TV'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/407_autogenerated.png',
  'name': 'All 4'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/tubi_100px.png',
  'name': 'Tubi TV'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/youtubePremium_100px.png',
  'name': 'Youtube Premium'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/crunchyroll_100px.png',
  'name': 'Crunchyroll Premium'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/shudder_100px.png',
  'name': 'Shudder'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/wwe_100px.png',
  'name': 'WWE Network'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/apple_100px.png',
  'name': 'AppleTV'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/googlePlay_100px.png',
  'name': 'Google Play'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/amazon_100px.png',
  'name': 'Amazon'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/youtube_100px.png',
  'name': 'YouTube'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/acorn_tv_prime_100px.png',
  'name': 'Acorn TV (Via Amazon Prime)'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/curiosity_stream_100px.png',
  'name': 'Curiosity Stream (Via Amazon Prime)'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/fandor_100px.png',
  'name': 'Fandor (Via Amazon Prime)'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/shout_100px.png',
  'name': 'Shout! Factory TV (Via Amazon Prime)'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/shudder_prime_100px.png',
  'name': 'Shudder (Via Amazon Prime)'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/starz_amazon_prime_100px.png',
  'name': 'STARZ (Via Amazon Prime)'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/sundance_now_100px.png',
  'name': 'SundanceNow Doc Club (Via Amazon Prime)'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/acorn_tv_100px.png',
  'name': 'Acorn TV'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/410_autogenerated.png',
  'name': 'BFI Player'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/britbox_100px.png',
  'name': 'Britbox'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/britbox_primeVideo_100px.png',
  'name': 'Britbox (Via Amazon Prime)'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/441_autogenerated.png',
  'name': 'Chili'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/crunchyroll_100px.png',
  'name': 'Crunchyroll'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/421_autogenerated.png',
  'name': 'Curiosity Stream'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/412_autogenerated.png',
  'name': 'Curzon Home Cinema'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/445_autogenerated.png',
  'name': 'Discovery+'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/422_autogenerated.png',
  'name': 'Flix Premiere'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/funimation_100px.png',
  'name': 'Funimation'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/401_autogenerated.png',
  'name': 'GuideDoc'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/413_autogenerated.png',
  'name': 'ITV Player'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/mubi_100px.png',
  'name': 'MUBI'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/418_autogenerated.png',
  'name': 'My5'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/414_autogenerated.png',
  'name': 'Pantaflix'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/391_autogenerated.png',
  'name': 'Pluto TV'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/417_autogenerated.png',
  'name': 'Rakuten TV'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/411_autogenerated.png',
  'name': 'Sky Store'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/415_autogenerated.png',
  'name': 'Talk Talk TV'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/416_autogenerated.png',
  'name': 'UKTV Play'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/446_autogenerated.png',
  'name': 'Virgin TV GO'},
 {'icon': 'https://cdn.watchmode.com/provider_logos/windows_store_100px.png',
  'name': 'Windows Store'}]

icons_mapping = {
    'Now TV': '../static/css/images/icons/nowtv.png', 
    'Netflix': '../static/css/images/icons/netflix.webp', 
    'Prime Video': '../static/css/images/icons/amazon.png',
    'Disney+': '../static/css/images/icons/disney.webp',
    'BBC iPlayer': '../static/css/images/icons/bbc.svg', 
    'ITV Player': '../static/css/images/icons/itvx.png',
    'Channel 4': '../static/css/images/icons/channel4.png',
    'Sky Go': '../static/css/images/icons/skytv.webp',
    'Pluto TV': '../static/css/images/icons/pluto.svg',
    'AppleTV+': '../static/css/images/icons/apple.png',
    'Hayu': '../static/css/images/icons/hayu.png',
    'Paramount Plus': '../static/css/images/icons/paramount+.png',
    'Paramount+': '../static/css/images/icons/paramount+.png',
    'Amazon Freevee': '../static/css/images/icons/freevee.png',
}

class Search(FlaskForm):
    name = StringField("Enter film name", render_kw={
                       "placeholder": "Search a film or series..."})
    submit = SubmitField("")


def get_results(search):
    results = []
    search_results = get_films(search)
    if search_results == 'REACHED_QUOTA_LIMIT':
        return 'REACHED_QUOTA_LIMIT'
    for result in search_results:
        result_id = result['id']
        streaming_services = get_streaming_services(result_id)
        poster = get_poster(result_id)
        data = {
            'name': result['name'],
            'result_id': result_id,
            'streaming_services': streaming_services,
            'poster': poster,
        }
        results.append(data)
    return results

def get_poster(result_id):
    url = f"https://api.watchmode.com/v1/title/{result_id}/details?apiKey={api_key}"
    try:
        response = requests.get(url)
        poster = response.json()['backdrop']
    except Exception as e:
        logging.error(e)
        poster = None
    return poster

def get_films(search):
    url = f"https://api.watchmode.com/v1/search?apiKey={api_key}&search_field=name&search_value={search}&types=tv,movie"
    try:
        response = requests.get(url)
        data = response.json()['title_results'][0:3]
    except Exception as e:
        logging.error(e)
        data= []
        if response.status_code == 402:
            logging.warn('REACHED_QUOTA_LIMIT')
            return 'REACHED_QUOTA_LIMIT'
    return data
    
def get_streaming_services(result_id):
    url = f'https://api.watchmode.com/v1/title/{result_id}/sources?apiKey={api_key}&regions=GB'
    try:
        response = requests.get(url)
        data = response.json()[0:4]
        for d in data:
            d['icon'] = icons_mapping.get(d['name'], [x['icon'] for x in api_icons_mapping if x['name'] == d['name']][0])
    except Exception as e:
        logging.error(e)
        data = []
    return data

    
@app.route('/', methods=["GET", "POST"])
def home():
    my_form = Search()
    
    if my_form.validate_on_submit():
        search_name = my_form.name.data
        return redirect(url_for('search', name=search_name))

    return render_template('index.html', template_form=my_form)

@app.route('/search/<name>', methods=["GET", "POST"])
def search(name):
    my_form = Search()    
    if my_form.validate_on_submit():
        search_name = my_form.name.data
        if name != search_name:
            return redirect(url_for('search', name=search_name))

    results = get_results(name)
    if results == 'REACHED_QUOTA_LIMIT':
        return 'Reached quoata limit, please return after 22nd'
    logging.info(results)
    results_count = len(results)
    
    return render_template(
        'index_search.html',
        template_results=results,
        template_form=my_form,
        search=name,
        results_count=results_count
    )